///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "VMware Dispatch Event Manager\n",
    "title": "Event Manager",
    "contact": {
      "email": "dispatch@vmware.com"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1/event",
  "paths": {
    "/": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "events"
        ],
        "summary": "Emit an event",
        "operationId": "emitEvent",
        "parameters": [
          {
            "description": "emission object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/emissionOAIGen"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event emitted",
            "schema": {
              "$ref": "#/definitions/emissionOAIGen"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      }
    },
    "/drivers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "List all existing drivers",
        "operationId": "getDrivers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eventDriver"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Create a new driver",
        "operationId": "addDriver",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Driver created",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      }
    },
    "/drivers/{driverName}": {
      "get": {
        "description": "Returns a single driver",
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Find driver by Name",
        "operationId": "getDriver",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single driver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Update driver by Name",
        "operationId": "updateDriver",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Deletes a driver",
        "operationId": "deleteDriver",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the driver to work on",
          "name": "driverName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/drivertypes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "List all existing driver types",
        "operationId": "getDriverTypes",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eventDriverType"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Create a new driver type",
        "operationId": "addDriverType",
        "parameters": [
          {
            "description": "driver type object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Driver Type created",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      }
    },
    "/drivertypes/{driverTypeName}": {
      "get": {
        "description": "Returns a single driver type",
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Find driver type by Name",
        "operationId": "getDriverType",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single driver type",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Update a driver type by Name",
        "operationId": "updateDriverType",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "DriverType not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Deletes a driver type",
        "operationId": "deleteDriverType",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the driver type to work on",
          "name": "driverTypeName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/subscriptions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "List all existing subscriptions",
        "operationId": "getSubscriptions",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subscriptionOAIGen"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Add a new subscription",
        "operationId": "addSubscription",
        "parameters": [
          {
            "description": "subscription object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription created",
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionName}": {
      "get": {
        "description": "Returns a single subscription",
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Find subscription by Name",
        "operationId": "getSubscription",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single subscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Update subscription by Name",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "description": "subscription object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Deletes a subscription",
        "operationId": "deleteSubscription",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the subscription to work on",
          "name": "subscriptionName",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "CloudEvent": {
      "type": "object",
      "required": [
        "namespace",
        "event-type",
        "cloud-events-version",
        "source-type",
        "source-id",
        "event-id"
      ],
      "properties": {
        "cloud-events-version": {
          "type": "string"
        },
        "content-type": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "event-id": {
          "type": "string"
        },
        "event-time": {
          "type": "string",
          "format": "date-time"
        },
        "event-type": {
          "type": "string",
          "maxLength": 128,
          "pattern": "^[\\w\\d\\-\\.]+$"
        },
        "event-type-version": {
          "type": "string"
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "namespace": {
          "type": "string"
        },
        "schema-url": {
          "type": "string"
        },
        "source-id": {
          "type": "string"
        },
        "source-type": {
          "type": "string"
        }
      }
    },
    "Config": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Driver": {
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config"
          }
        },
        "created-time": {
          "type": "integer",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "readOnly": true
        },
        "modified-time": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "reason": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/Status",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "type": {
          "type": "string",
          "maxLength": 32
        }
      }
    },
    "DriverType": {
      "type": "object",
      "required": [
        "image",
        "name"
      ],
      "properties": {
        "built-in": {
          "type": "boolean",
          "readOnly": true
        },
        "config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config"
          }
        },
        "created-time": {
          "type": "integer",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "image": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "readOnly": true
        },
        "modified-time": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 32
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Emission": {
      "type": "object",
      "required": [
        "event"
      ],
      "properties": {
        "emitted-time": {
          "type": "integer",
          "readOnly": true
        },
        "event": {
          "$ref": "#/definitions/CloudEvent"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer"
        },
        "function-error": {
          "type": "object"
        },
        "message": {
          "type": "string"
        },
        "user-error": {
          "type": "object"
        }
      }
    },
    "Status": {
      "type": "string",
      "enum": [
        "INITIALIZED",
        "CREATING",
        "READY",
        "UPDATING",
        "ERROR",
        "DELETING"
      ]
    },
    "Subscription": {
      "type": "object",
      "required": [
        "function",
        "source-type",
        "event-type",
        "name"
      ],
      "properties": {
        "created-time": {
          "type": "integer",
          "readOnly": true
        },
        "event-type": {
          "type": "string",
          "maxLength": 128,
          "pattern": "^[\\w\\d\\-\\.]+$"
        },
        "function": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "readOnly": true
        },
        "modified-time": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$"
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source-type": {
          "type": "string",
          "maxLength": 32,
          "pattern": "^[\\w\\d\\-]+$"
        },
        "status": {
          "$ref": "#/definitions/Status",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "emissionOAIGen": {
      "description": "Emission emission",
      "type": "object",
      "required": [
        "event"
      ],
      "properties": {
        "emitted-time": {
          "description": "emitted time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "EmittedTime",
          "readOnly": true
        },
        "event": {
          "$ref": "#/definitions/emissionOaiGenEvent"
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/emissionOaiGenTagsItems"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "emissionOaiGenEvent": {
      "description": "CloudEvent cloud event",
      "type": "object",
      "required": [
        "cloud-events-version",
        "event-id",
        "event-type",
        "namespace",
        "source-id",
        "source-type"
      ],
      "properties": {
        "cloud-events-version": {
          "description": "cloud events version",
          "type": "string",
          "x-go-name": "CloudEventsVersion"
        },
        "content-type": {
          "description": "content type",
          "type": "string",
          "x-go-name": "ContentType"
        },
        "data": {
          "description": "data",
          "type": "string",
          "x-go-name": "Data"
        },
        "event-id": {
          "description": "event id",
          "type": "string",
          "x-go-name": "EventID"
        },
        "event-time": {
          "description": "event time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EventTime"
        },
        "event-type": {
          "description": "event type",
          "type": "string",
          "maxLength": 128,
          "pattern": "^[\\w\\d\\-\\.]+$",
          "x-go-name": "EventType"
        },
        "event-type-version": {
          "description": "event type version",
          "type": "string",
          "x-go-name": "EventTypeVersion"
        },
        "extensions": {
          "description": "extensions",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Extensions"
        },
        "namespace": {
          "description": "namespace",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "schema-url": {
          "description": "schema url",
          "type": "string",
          "x-go-name": "SchemaURL"
        },
        "source-id": {
          "description": "source id",
          "type": "string",
          "x-go-name": "SourceID"
        },
        "source-type": {
          "description": "source type",
          "type": "string",
          "x-go-name": "SourceType"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "emissionOaiGenTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "errorOAIGen": {
      "description": "Error error",
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "function-error": {
          "description": "function error",
          "type": "object",
          "x-go-name": "FunctionError"
        },
        "message": {
          "description": "message",
          "type": "string",
          "x-go-name": "Message"
        },
        "user-error": {
          "description": "user error",
          "type": "object",
          "x-go-name": "UserError"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriver": {
      "description": "EventDriver driver",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "config": {
          "description": "config",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverConfigItems"
          },
          "x-go-name": "Config"
        },
        "created-time": {
          "description": "created time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedTime",
          "readOnly": true
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Kind",
          "readOnly": true
        },
        "modified-time": {
          "description": "modified time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModifiedTime",
          "readOnly": true
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "reason": {
          "description": "reason",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Reason"
        },
        "secrets": {
          "description": "secrets",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Secrets"
        },
        "status": {
          "description": "Status status",
          "type": "string",
          "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverTagsItems"
          },
          "x-go-name": "Tags"
        },
        "type": {
          "description": "type",
          "type": "string",
          "maxLength": 32,
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverConfigItems": {
      "description": "Config config",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverType": {
      "description": "EventDriverType driver type",
      "type": "object",
      "required": [
        "image",
        "name"
      ],
      "properties": {
        "built-in": {
          "description": "built in",
          "type": "boolean",
          "x-go-name": "BuiltIn",
          "readOnly": true
        },
        "config": {
          "description": "config",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverTypeConfigItems"
          },
          "x-go-name": "Config"
        },
        "created-time": {
          "description": "created time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedTime",
          "readOnly": true
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "image": {
          "description": "image",
          "type": "string",
          "x-go-name": "Image"
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Kind",
          "readOnly": true
        },
        "modified-time": {
          "description": "modified time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModifiedTime",
          "readOnly": true
        },
        "name": {
          "description": "name",
          "type": "string",
          "maxLength": 32,
          "x-go-name": "Name"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverTypeTagsItems"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverTypeConfigItems": {
      "description": "Config config",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverTypeTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "subscriptionOAIGen": {
      "description": "Subscription subscription",
      "type": "object",
      "required": [
        "event-type",
        "function",
        "name",
        "source-type"
      ],
      "properties": {
        "created-time": {
          "description": "created time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedTime",
          "readOnly": true
        },
        "event-type": {
          "description": "event type",
          "type": "string",
          "maxLength": 128,
          "pattern": "^[\\w\\d\\-\\.]+$",
          "x-go-name": "EventType"
        },
        "function": {
          "description": "function",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Function"
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Kind",
          "readOnly": true
        },
        "modified-time": {
          "description": "modified time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModifiedTime",
          "readOnly": true
        },
        "name": {
          "description": "name",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Name"
        },
        "secrets": {
          "description": "secrets",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Secrets"
        },
        "source-type": {
          "description": "source type",
          "type": "string",
          "maxLength": 32,
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "SourceType"
        },
        "status": {
          "description": "Status status",
          "type": "string",
          "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/subscriptionOaiGenTagsItems"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "subscriptionOaiGenTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "cookie": {
      "description": "use cookies for authentication, when the user already logged in",
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "security": [
    {
      "cookie": []
    },
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "description": "Operations on subscriptions",
      "name": "subscriptions"
    },
    {
      "description": "Operations on events",
      "name": "events"
    },
    {
      "description": "Operations on event drivers",
      "name": "drivers"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "VMware Dispatch Event Manager\n",
    "title": "Event Manager",
    "contact": {
      "email": "dispatch@vmware.com"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1/event",
  "paths": {
    "/": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "events"
        ],
        "summary": "Emit an event",
        "operationId": "emitEvent",
        "parameters": [
          {
            "description": "emission object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/emissionOAIGen"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event emitted",
            "schema": {
              "$ref": "#/definitions/emissionOAIGen"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      }
    },
    "/drivers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "List all existing drivers",
        "operationId": "getDrivers",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eventDriver"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Create a new driver",
        "operationId": "addDriver",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Driver created",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      }
    },
    "/drivers/{driverName}": {
      "get": {
        "description": "Returns a single driver",
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Find driver by Name",
        "operationId": "getDriver",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single driver",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Update driver by Name",
        "operationId": "updateDriver",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Deletes a driver",
        "operationId": "deleteDriver",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriver"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the driver to work on",
          "name": "driverName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/drivertypes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "List all existing driver types",
        "operationId": "getDriverTypes",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eventDriverType"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Create a new driver type",
        "operationId": "addDriverType",
        "parameters": [
          {
            "description": "driver type object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Driver Type created",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      }
    },
    "/drivertypes/{driverTypeName}": {
      "get": {
        "description": "Returns a single driver type",
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Find driver type by Name",
        "operationId": "getDriverType",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single driver type",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Update a driver type by Name",
        "operationId": "updateDriverType",
        "parameters": [
          {
            "description": "driver object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "DriverType not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Deletes a driver type",
        "operationId": "deleteDriverType",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/eventDriverType"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Driver not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the driver type to work on",
          "name": "driverTypeName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/subscriptions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "List all existing subscriptions",
        "operationId": "getSubscriptions",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Filter based on tags",
            "name": "tags",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subscriptionOAIGen"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Add a new subscription",
        "operationId": "addSubscription",
        "parameters": [
          {
            "description": "subscription object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription created",
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "409": {
            "description": "Already Exists",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionName}": {
      "get": {
        "description": "Returns a single subscription",
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Find subscription by Name",
        "operationId": "getSubscription",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "put": {
        "description": "Updates a single subscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Update subscription by Name",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "description": "subscription object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          },
          "400": {
            "description": "Invalid Name supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Unknown error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Deletes a subscription",
        "operationId": "deleteSubscription",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/subscriptionOAIGen"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "404": {
            "description": "Subscription not found",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          },
          "default": {
            "description": "Generic error response",
            "schema": {
              "$ref": "#/definitions/errorOAIGen"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi",
          "description": "Filter based on tags",
          "name": "tags",
          "in": "query"
        },
        {
          "pattern": "^[\\w\\d\\-]+$",
          "type": "string",
          "description": "Name of the subscription to work on",
          "name": "subscriptionName",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "CloudEvent": {
      "type": "object",
      "required": [
        "namespace",
        "event-type",
        "cloud-events-version",
        "source-type",
        "source-id",
        "event-id"
      ],
      "properties": {
        "cloud-events-version": {
          "type": "string"
        },
        "content-type": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "event-id": {
          "type": "string"
        },
        "event-time": {
          "type": "string",
          "format": "date-time"
        },
        "event-type": {
          "type": "string",
          "maxLength": 128,
          "pattern": "^[\\w\\d\\-\\.]+$"
        },
        "event-type-version": {
          "type": "string"
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "namespace": {
          "type": "string"
        },
        "schema-url": {
          "type": "string"
        },
        "source-id": {
          "type": "string"
        },
        "source-type": {
          "type": "string"
        }
      }
    },
    "Config": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Driver": {
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config"
          }
        },
        "created-time": {
          "type": "integer",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "readOnly": true
        },
        "modified-time": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "reason": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/Status",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "type": {
          "type": "string",
          "maxLength": 32
        }
      }
    },
    "DriverType": {
      "type": "object",
      "required": [
        "image",
        "name"
      ],
      "properties": {
        "built-in": {
          "type": "boolean",
          "readOnly": true
        },
        "config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config"
          }
        },
        "created-time": {
          "type": "integer",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "image": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "readOnly": true
        },
        "modified-time": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 32
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Emission": {
      "type": "object",
      "required": [
        "event"
      ],
      "properties": {
        "emitted-time": {
          "type": "integer",
          "readOnly": true
        },
        "event": {
          "$ref": "#/definitions/CloudEvent"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer"
        },
        "function-error": {
          "type": "object"
        },
        "message": {
          "type": "string"
        },
        "user-error": {
          "type": "object"
        }
      }
    },
    "Status": {
      "type": "string",
      "enum": [
        "INITIALIZED",
        "CREATING",
        "READY",
        "UPDATING",
        "ERROR",
        "DELETING"
      ]
    },
    "Subscription": {
      "type": "object",
      "required": [
        "function",
        "source-type",
        "event-type",
        "name"
      ],
      "properties": {
        "created-time": {
          "type": "integer",
          "readOnly": true
        },
        "event-type": {
          "type": "string",
          "maxLength": 128,
          "pattern": "^[\\w\\d\\-\\.]+$"
        },
        "function": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "kind": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "readOnly": true
        },
        "modified-time": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$"
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "source-type": {
          "type": "string",
          "maxLength": 32,
          "pattern": "^[\\w\\d\\-]+$"
        },
        "status": {
          "$ref": "#/definitions/Status",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "emissionOAIGen": {
      "description": "Emission emission",
      "type": "object",
      "required": [
        "event"
      ],
      "properties": {
        "emitted-time": {
          "description": "emitted time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "EmittedTime",
          "readOnly": true
        },
        "event": {
          "$ref": "#/definitions/emissionOaiGenEvent"
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/emissionOaiGenTagsItems"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "emissionOaiGenEvent": {
      "description": "CloudEvent cloud event",
      "type": "object",
      "required": [
        "cloud-events-version",
        "event-id",
        "event-type",
        "namespace",
        "source-id",
        "source-type"
      ],
      "properties": {
        "cloud-events-version": {
          "description": "cloud events version",
          "type": "string",
          "x-go-name": "CloudEventsVersion"
        },
        "content-type": {
          "description": "content type",
          "type": "string",
          "x-go-name": "ContentType"
        },
        "data": {
          "description": "data",
          "type": "string",
          "x-go-name": "Data"
        },
        "event-id": {
          "description": "event id",
          "type": "string",
          "x-go-name": "EventID"
        },
        "event-time": {
          "description": "event time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EventTime"
        },
        "event-type": {
          "description": "event type",
          "type": "string",
          "maxLength": 128,
          "pattern": "^[\\w\\d\\-\\.]+$",
          "x-go-name": "EventType"
        },
        "event-type-version": {
          "description": "event type version",
          "type": "string",
          "x-go-name": "EventTypeVersion"
        },
        "extensions": {
          "description": "extensions",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Extensions"
        },
        "namespace": {
          "description": "namespace",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "schema-url": {
          "description": "schema url",
          "type": "string",
          "x-go-name": "SchemaURL"
        },
        "source-id": {
          "description": "source id",
          "type": "string",
          "x-go-name": "SourceID"
        },
        "source-type": {
          "description": "source type",
          "type": "string",
          "x-go-name": "SourceType"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "emissionOaiGenTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "errorOAIGen": {
      "description": "Error error",
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "description": "code",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "function-error": {
          "description": "function error",
          "type": "object",
          "x-go-name": "FunctionError"
        },
        "message": {
          "description": "message",
          "type": "string",
          "x-go-name": "Message"
        },
        "user-error": {
          "description": "user error",
          "type": "object",
          "x-go-name": "UserError"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriver": {
      "description": "EventDriver driver",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "config": {
          "description": "config",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverConfigItems"
          },
          "x-go-name": "Config"
        },
        "created-time": {
          "description": "created time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedTime",
          "readOnly": true
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Kind",
          "readOnly": true
        },
        "modified-time": {
          "description": "modified time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModifiedTime",
          "readOnly": true
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "reason": {
          "description": "reason",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Reason"
        },
        "secrets": {
          "description": "secrets",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Secrets"
        },
        "status": {
          "description": "Status status",
          "type": "string",
          "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverTagsItems"
          },
          "x-go-name": "Tags"
        },
        "type": {
          "description": "type",
          "type": "string",
          "maxLength": 32,
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverConfigItems": {
      "description": "Config config",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverType": {
      "description": "EventDriverType driver type",
      "type": "object",
      "required": [
        "image",
        "name"
      ],
      "properties": {
        "built-in": {
          "description": "built in",
          "type": "boolean",
          "x-go-name": "BuiltIn",
          "readOnly": true
        },
        "config": {
          "description": "config",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverTypeConfigItems"
          },
          "x-go-name": "Config"
        },
        "created-time": {
          "description": "created time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedTime",
          "readOnly": true
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "image": {
          "description": "image",
          "type": "string",
          "x-go-name": "Image"
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Kind",
          "readOnly": true
        },
        "modified-time": {
          "description": "modified time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModifiedTime",
          "readOnly": true
        },
        "name": {
          "description": "name",
          "type": "string",
          "maxLength": 32,
          "x-go-name": "Name"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventDriverTypeTagsItems"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverTypeConfigItems": {
      "description": "Config config",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "eventDriverTypeTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "subscriptionOAIGen": {
      "description": "Subscription subscription",
      "type": "object",
      "required": [
        "event-type",
        "function",
        "name",
        "source-type"
      ],
      "properties": {
        "created-time": {
          "description": "created time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedTime",
          "readOnly": true
        },
        "event-type": {
          "description": "event type",
          "type": "string",
          "maxLength": 128,
          "pattern": "^[\\w\\d\\-\\.]+$",
          "x-go-name": "EventType"
        },
        "function": {
          "description": "function",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Function"
        },
        "id": {
          "description": "id",
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID",
          "readOnly": true
        },
        "kind": {
          "description": "kind",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Kind",
          "readOnly": true
        },
        "modified-time": {
          "description": "modified time",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ModifiedTime",
          "readOnly": true
        },
        "name": {
          "description": "name",
          "type": "string",
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "Name"
        },
        "secrets": {
          "description": "secrets",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Secrets"
        },
        "source-type": {
          "description": "source type",
          "type": "string",
          "maxLength": 32,
          "pattern": "^[\\w\\d\\-]+$",
          "x-go-name": "SourceType"
        },
        "status": {
          "description": "Status status",
          "type": "string",
          "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
        },
        "tags": {
          "description": "tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/subscriptionOaiGenTagsItems"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    },
    "subscriptionOaiGenTagsItems": {
      "description": "Tag tag",
      "type": "object",
      "properties": {
        "key": {
          "description": "key",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/vmware/dispatch/pkg/api/v1"
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "cookie": {
      "description": "use cookies for authentication, when the user already logged in",
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "security": [
    {
      "cookie": []
    },
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "description": "Operations on subscriptions",
      "name": "subscriptions"
    },
    {
      "description": "Operations on events",
      "name": "events"
    },
    {
      "description": "Operations on event drivers",
      "name": "drivers"
    }
  ]
}`))
}
