///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// AddAppReader is a Reader for the AddApp structure.
type AddAppReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddAppReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddAppOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddAppBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddAppUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddAppConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddAppInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddAppOK creates a AddAppOK with default headers values
func NewAddAppOK() *AddAppOK {
	return &AddAppOK{}
}

/*AddAppOK handles this case with default header values.

Application created
*/
type AddAppOK struct {
	Payload *v1.Application
}

func (o *AddAppOK) Error() string {
	return fmt.Sprintf("[POST /][%d] addAppOK  %+v", 200, o.Payload)
}

func (o *AddAppOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Application)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppBadRequest creates a AddAppBadRequest with default headers values
func NewAddAppBadRequest() *AddAppBadRequest {
	return &AddAppBadRequest{}
}

/*AddAppBadRequest handles this case with default header values.

Invalid Input
*/
type AddAppBadRequest struct {
	Payload *v1.Error
}

func (o *AddAppBadRequest) Error() string {
	return fmt.Sprintf("[POST /][%d] addAppBadRequest  %+v", 400, o.Payload)
}

func (o *AddAppBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppUnauthorized creates a AddAppUnauthorized with default headers values
func NewAddAppUnauthorized() *AddAppUnauthorized {
	return &AddAppUnauthorized{}
}

/*AddAppUnauthorized handles this case with default header values.

Unauthorized Request
*/
type AddAppUnauthorized struct {
	Payload *v1.Error
}

func (o *AddAppUnauthorized) Error() string {
	return fmt.Sprintf("[POST /][%d] addAppUnauthorized  %+v", 401, o.Payload)
}

func (o *AddAppUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppConflict creates a AddAppConflict with default headers values
func NewAddAppConflict() *AddAppConflict {
	return &AddAppConflict{}
}

/*AddAppConflict handles this case with default header values.

Already Exists
*/
type AddAppConflict struct {
	Payload *v1.Error
}

func (o *AddAppConflict) Error() string {
	return fmt.Sprintf("[POST /][%d] addAppConflict  %+v", 409, o.Payload)
}

func (o *AddAppConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppInternalServerError creates a AddAppInternalServerError with default headers values
func NewAddAppInternalServerError() *AddAppInternalServerError {
	return &AddAppInternalServerError{}
}

/*AddAppInternalServerError handles this case with default header values.

Internal Error
*/
type AddAppInternalServerError struct {
	Payload *v1.Error
}

func (o *AddAppInternalServerError) Error() string {
	return fmt.Sprintf("[POST /][%d] addAppInternalServerError  %+v", 500, o.Payload)
}

func (o *AddAppInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
