///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// GetAppReader is a Reader for the GetApp structure.
type GetAppReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAppOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAppBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAppNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetAppInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAppOK creates a GetAppOK with default headers values
func NewGetAppOK() *GetAppOK {
	return &GetAppOK{}
}

/*GetAppOK handles this case with default header values.

Successful operation
*/
type GetAppOK struct {
	Payload *v1.Application
}

func (o *GetAppOK) Error() string {
	return fmt.Sprintf("[GET /{application}][%d] getAppOK  %+v", 200, o.Payload)
}

func (o *GetAppOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Application)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppBadRequest creates a GetAppBadRequest with default headers values
func NewGetAppBadRequest() *GetAppBadRequest {
	return &GetAppBadRequest{}
}

/*GetAppBadRequest handles this case with default header values.

Invalid Name supplied
*/
type GetAppBadRequest struct {
	Payload *v1.Error
}

func (o *GetAppBadRequest) Error() string {
	return fmt.Sprintf("[GET /{application}][%d] getAppBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppNotFound creates a GetAppNotFound with default headers values
func NewGetAppNotFound() *GetAppNotFound {
	return &GetAppNotFound{}
}

/*GetAppNotFound handles this case with default header values.

Application not found
*/
type GetAppNotFound struct {
	Payload *v1.Error
}

func (o *GetAppNotFound) Error() string {
	return fmt.Sprintf("[GET /{application}][%d] getAppNotFound  %+v", 404, o.Payload)
}

func (o *GetAppNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppInternalServerError creates a GetAppInternalServerError with default headers values
func NewGetAppInternalServerError() *GetAppInternalServerError {
	return &GetAppInternalServerError{}
}

/*GetAppInternalServerError handles this case with default header values.

Internal error
*/
type GetAppInternalServerError struct {
	Payload *v1.Error
}

func (o *GetAppInternalServerError) Error() string {
	return fmt.Sprintf("[GET /{application}][%d] getAppInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
